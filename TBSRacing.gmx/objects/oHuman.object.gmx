<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sTorso</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>3</depth>
  <persistent>0</persistent>
  <parentName>oStateObject</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// base
event_inherited();
image_speed = 0;

flagSet(OBJ_PAR.UPDATABLE 
    | OBJ_PAR.DRAWABLE
    | OBJ_PAR.IMPACTABLE_PAUSE 
    | OBJ_PAR.IMPACTABLE_TURN
    | OBJ_PAR.PHYSICAL, 1);  
    
spd = .6;
angleSpeed = 2;

setOnPath = 1;

moveTime = 0;
maxMoveTime = random_range(1.5, 2.5) * room_speed;
wanderLen = 150;

collideTrigger = 0;
collideTriggerTreshold = room_speed * .75;

circleFix = -1;
colFixFix = -1;
collider = instance_create(x, y, oHumanCarCollider);
collider.human = id;

torsoSpr = sTorso;
torsoI = 0;
torsoSpd = 0;
torsoNumb = sprite_get_number(torsoSpr);
torsoCol = -1;
torsoState = 0;

headSpr = sHead;
headI = -1;
headSpd = 0;
headNumb = sprite_get_number(headSpr);
headCol = c_white;
headL = 0;
headD = 0;
headState = 0;

hairSpr = sHairs;
hairI = 0;
hairSpd = 0;
hairNumb = sprite_get_number(hairSpr);
hairCol = c_white;
hairL = headL;
hairD = 0;
hairState = 0;

handLSpr = sHand;
handLI = 0;
handLSpd = .2;
handLNumb = sprite_get_number(handLSpr);
handLCol = -1; 
handLScale = 1; 
handLL = 0;
handLD = 0;
handLState = 1;

handRSpr = sHand;
handRI = 0;
handRSpd = .2;
handRNumb = sprite_get_number(handRSpr);
handRScale = -1;
handRCol = -1;  
handRL = 0;
handRD = 0;
handRState = 3;

legLSpr = sLeg;
legLI = 0;
legLSpd = .2;
legLNumb = sprite_get_number(legLSpr);
legLScale = -1;
legLCol = -1;
legLL = 0;
legLD = 0;
legLState = 3;

legRSpr = sLeg;
legRI = 0;
legRSpd = legLSpd;
legRNumb = sprite_get_number(legRSpr);
legRScale = 1;
legRCol = -1;
legRL = 0;
legRD = 0;
legRState = 1;

state = HUMAN_STATES.__IDLE;

path = -1;
pathInd = -1;
pointX = 0;
pointY = 0;

bloodsCount = 4;
bloodsX[bloodsCount - 1] = 0;
bloodsY[bloodsCount - 1] = 0;
bloodMaxR = 12;
bloodsR[bloodsCount - 1] = 0;
bloodCol2 = make_colour_hsv(0, 240, 190);
bloodCol1 = bloodCol2;

// blood emitter
psys = part_system_create();
part_system_automatic_update(psys, 0);
part_system_depth(psys, depth - 1);

pem = part_emitter_create(psys);

humanGenerate();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
if (path != -1)
    path_delete(path);
physics_fixture_delete(colFixFix);

part_emitter_destroy(psys, pem);
part_system_destroy(psys);

instance_destroy(collider);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///update
if (!(flags &amp; OBJ_PAR.UPDATABLE))
    exit;

part_system_update(psys);

if (collider != noone)
{
    collider.phy_position_x = phy_position_x;
    collider.phy_position_y = phy_position_y;
    collider.phy_rotation = phy_rotation;
}


switch (state)
{
case HUMAN_STATES.__MOVE_POINT:
    if (distance_to_point(pointX, pointY) &lt;= spd)
    {
        humanGetNextPathPoint();
        exit;
    }

    // rotate to direction
    var pdir = point_direction(phy_position_x, phy_position_y, pointX, pointY);
    phy_rotation = angleRotate(phy_rotation, -pdir, angleSpeed);
    var dx = lengthdir_x(spd, -phy_rotation),    
        dy = lengthdir_y(spd, -phy_rotation);
    phy_position_x += dx;
    phy_position_y += dy;
    
    humanUpdatePartsMoving();
    break;
    
case HUMAN_STATES.__WANDER:
    if ((distance_to_point(pointX, pointY) &lt;= spd)
        || (moveTime &gt; maxMoveTime))
    {
        humanGetNextWanderPoint();
        exit;
    }
    // rotate to direction
    var pdir = point_direction(phy_position_x, phy_position_y, pointX, pointY);
    phy_rotation = angleRotate(phy_rotation, -pdir, angleSpeed);
    var dx = lengthdir_x(spd, -phy_rotation),    
        dy = lengthdir_y(spd, -phy_rotation);
    phy_position_x += dx;
    phy_position_y += dy;
    
    humanUpdatePartsMoving();
    break;
    
case HUMAN_STATES.__FLY_AWAY:
    humanUpdatePartsMoving();
    if (phy_speed &lt;= .05)
        humanSetState(HUMAN_STATES.__DIE);
    break;
    
case HUMAN_STATES.__DIE:
    for (var i = 0; i &lt; bloodsCount; i++)
    {
        bloodsR[i] = clamp(bloodsR[i] + .05, 0, bloodMaxR);
    }
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oHuman">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (state &gt;= HUMAN_STATES.__FLY_AWAY)
    exit;
    
if ((phy_position_x == other.phy_position_x) 
    &amp;&amp; (phy_position_y == other.phy_position_y))
{
    var dx = 1,
        dy = 0;
    phy_position_x += dx;
    phy_position_y += dy;
}

var dir = point_direction(other.phy_position_x, other.phy_position_x, phy_position_x, phy_position_x);
var dx = lengthdir_x(1, dir),
    dy = lengthdir_y(1, dir);
phy_position_x += dx;
phy_position_y += dy;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oBaseCollidable">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (state == HUMAN_STATES.__WANDER)
{ 
    collideTrigger++;
    if (collideTrigger &gt;= collideTriggerTreshold)
        humanGetNextWanderPoint();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// off physical pause
phy_active = 1;
flagSet(OBJ_PAR.UPDATABLE, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="15">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// on physical pause
phy_active = 0;
flagSet(OBJ_PAR.UPDATABLE, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// off pause
image_speed = imgspdstop;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// on pause
imgspdstop = image_speed;
image_speed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!path_get_closed(path))
    instance_destroy();
else
{
    pathInd = -1;
    humanGetNextPathPoint();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// blood
if (state == HUMAN_STATES.__DIE)
{
    for (var i = 0; i &lt; bloodsCount; i++)
    {
        draw_circle_colour(bloodsX[i], bloodsY[i], bloodsR[i], bloodCol1, bloodCol2, 0);
    }
}
// hand left
var realrot = -phy_rotation;
if (handLI != -1)
    draw_sprite_ext(handLSpr, clamp(handLI, 0, handLNumb - 1), 
        phy_position_x + lengthdir_x(handLL, realrot + handLD),
        phy_position_y + lengthdir_y(handLL, realrot + handLD), 
        handLScale, 1, realrot, handLCol, image_alpha);
// hand right
if (handRI != -1)
    draw_sprite_ext(handRSpr, clamp(handRI, 0, handRNumb - 1), 
        phy_position_x + lengthdir_x(handRL, realrot + handRD),
        phy_position_y + lengthdir_y(handRL, realrot + handRD), 
        handRScale, 1, realrot, handRCol, image_alpha);

// leg left
if (legLI != -1)
    draw_sprite_ext(legLSpr, clamp(legLI, 0, legLNumb - 1), 
        phy_position_x + lengthdir_x(legLL, realrot + legLD),
        phy_position_y + lengthdir_y(legLL, realrot + legLD), 
        legLScale, 1, realrot, legLCol, image_alpha);
// leg right
if (legRI != -1)
    draw_sprite_ext(legRSpr, clamp(legRI, 0, legRNumb - 1), 
        phy_position_x + lengthdir_x(legRL, realrot + legRD),
        phy_position_y + lengthdir_y(legRL, realrot + legRD), 
        legRScale, 1, realrot, legRCol, image_alpha);
draw_sprite_ext(torsoSpr, clamp(torsoI, 0, torsoNumb - 1), phy_position_x, phy_position_y, 1, 1, realrot, torsoCol, image_alpha);
// head
draw_sprite_ext(headSpr, clamp(headI, 0, headNumb - 1), 
    phy_position_x + lengthdir_x(headL, realrot + headD),
    phy_position_y + lengthdir_y(headL, realrot + headD), 
    1, 1, realrot, headCol, image_alpha);
// hair
draw_sprite_ext(hairSpr, clamp(hairI, 0, hairNumb - 1), 
    phy_position_x + lengthdir_x(hairL, realrot + hairD),
    phy_position_y + lengthdir_y(hairL, realrot + hairD), 
    1, 1, realrot, hairCol, image_alpha);

humanDrawDebug();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>2</PhysicsObjectShape>
  <PhysicsObjectDensity>0.800000011920929</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>1.60000002384186</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>1</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.800000011920929</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
