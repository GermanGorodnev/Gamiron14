<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sBlacksCar1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oBaseCar</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
image_speed = 0;

path_clear_points(pathMove);

type = choose(CARS.__BLACKS_JEEP);
control = CONTROL_TYPES.POINTS;
state = EN_CAR_ST.__INACTIVE;
team = 1;

pointId = -1;

// gui control
engineArrowH = -1;

// target to chase
targetId = noone; //instance_create(x, y, oCarTarget);
POINT_RADIUS_PRECISION = 240;

angleAdd = 0;

// new control form
arrowDir = 0;

// hp
wheelsCount = 4;
wheelHP[3] = 0;
wheelMaxHP[3] = 0;

engineHP = 350;
engineMaxHP = engineHP;


/*
carPhysicsInit(type);
carInitEnd();
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
instance_destroy(targetId);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// weapon clip
for (var i = 0; i &lt; weaponsCount; i++)
{
    var ww = weapon[i];
    if (ww == noone)
        continue;
    ww.phy_position_x = phy_position_x + lengthdir_x(ww.lenoff, -phy_rotation + ww.angleoff);
    ww.phy_position_y = phy_position_y + lengthdir_y(ww.lenoff, -phy_rotation + ww.angleoff);     
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update
if (!(flags &amp; OBJ_PAR.UPDATABLE))
    exit;
switch (state)
{
case EN_CAR_ST.__INACTIVE:
case EN_CAR_ST.__MOVE_TO_POINT:
    carProceedParams();
    part_system_update(psys);
    carMoveArrow();  
    
    if (distance_to_object(targetId) &lt; POINT_RADIUS_PRECISION)
    {
        // get next point
        path_delete_point(pathMove, pointId);
        if (path_get_number(pathMove))
        {
            enemyPathGetNextPoint();
        }
        else
        {
            carPathDelete();
            //carSetState(PL_CAR_ST.__INACTIVE);
        }
    }
    
    break;
}


/*case CONTROL_TYPES.POINTS:
    switch (state)
    {
    case PL_CAR_ST.__INACTIVE:
        carProceedParams();
        part_system_update(psys);
        
        // take the point
        if (path_get_number(pathMove))
        {
            carPathGetNextPoint();
            exit;
        }
        else
            carMoveDirection(-phy_rotation);
        break;
        
    case PL_CAR_ST.__MOVE_TO_POINT:
        // change variables
        carProceedParams();
        part_system_update(psys);
        
        // update position
        if (!path_get_number(pathMove))
        {
            // well, stop
            carSetState(PL_CAR_ST.__INACTIVE);
        }
        else
        {
            carTargetSetPoint(path_get_point_x(pathMove, pointId), path_get_point_y(pathMove, pointId));
        }
        
        carMoveToPoint(targetId.phy_position_x, targetId.phy_position_y);
            
        if (physics_test_overlap(phy_position_x, phy_position_y, phy_rotation, targetId))
        {
            // get next point
            show_debug_message("POINT DONE!");
            path_delete_point(pathMove, pointId);
            if (path_get_number(pathMove))
            {
                carTargetSetPoint(path_get_point_x(pathMove, pointId), path_get_point_y(pathMove, pointId));
            }
            else
            {
                carPathDelete();
                carSetState(PL_CAR_ST.__INACTIVE);
            }
        }
        break;
    }
    break;
}
        

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oHumanCarCollider">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var car = id;
with (other.human)
{
    if (state &gt;= HUMAN_STATES.__FLY_AWAY)
        exit;
    if (car.phy_speed &gt; .1)
    {
        // oooh
        humanGenerateBlood();
        physics_apply_impulse(phy_position_x, phy_position_y, 
            lengthdir_x(car.phy_speed * 30, car.phy_rotation),
            lengthdir_y(car.phy_speed * 30, car.phy_rotation));
        physics_apply_angular_impulse(phy_speed * 50);
        humanSetState(HUMAN_STATES.__FLY_AWAY);  
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// off physical pause
phy_active = 1;
flagSet(OBJ_PAR.UPDATABLE, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="15">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// on physical pause
phy_active = 0;
flagSet(OBJ_PAR.UPDATABLE, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw light
// forward lights
if (!objectInView())
    exit;
var sx = phy_position_x + lengthdir_x(forwLightX, phy_rotation),
    sy = phy_position_y + lengthdir_y(forwLightX, phy_rotation);
var ldx = lengthdir_x(forwLightY, -phy_rotation + 90),
    ldy = lengthdir_y(forwLightY, -phy_rotation + 90);
draw_sprite_ext(sLightPoint, 0, sx + ldx - view_xview, 
    sy + ldy - view_yview, 1, 1, 0, forwLightCol, image_alpha);
draw_sprite_ext(sLightPoint, 0, sx - ldx - view_xview, 
    sy - ldy - view_yview, 1, 1, 0, forwLightCol, image_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// off pause

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// on pause
//flagSet(OBJ_PAR.UPDATABLE, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//carDrawShadow();
draw_self();
carDebugDraw();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
