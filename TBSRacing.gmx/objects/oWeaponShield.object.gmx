<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sGunShield</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>oBaseWeapon</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// base
event_inherited();

flagSet(OBJ_PAR.UPDATABLE 
    | OBJ_PAR.DRAWABLE
    | OBJ_PAR.IMPACTABLE_PAUSE 
    | OBJ_PAR.IMPACTABLE_TURN, 1);  
// some params
wType = WEAPONS.__SHIELD;
wDmgMin = 0;
wDmgMax = 0;
wDmgRecoil = 3;
wAngleSpeed = .4;

wMaxHP = 50;
wHP = wMaxHP;

shotTmr = -1;
shotTmrStep = round(3 * room_speed);
canShootTmrSteps = room_speed * 6;

lenoff = 0;
angleoff = 0;

ldll = 44;
lddir = -2;

R = 226;
cA = 0;
cC = c_blue;
cR = 0;

uni_time = shader_get_uniform(shdWave,"time");
var_time_var = 0;

uni_mouse_pos = shader_get_uniform(shdWave,"mouse_pos");
var_mouse_pos_x = mouse_x - view_xview;
var_mouse_pos_y = mouse_y - view_yview;

uni_resolution = shader_get_uniform(shdWave,"resolution");
var_resolution_x = view_wview;
var_resolution_y = view_hview;

uni_wave_amount = shader_get_uniform(shdWave,"wave_amount");
var_wave_amount = 5; //higher = more waves

uni_wave_distortion = shader_get_uniform(shdWave,"wave_distortion");
var_wave_distortion = 60; //higher = less distortion

uni_wave_speed = shader_get_uniform(shdWave,"wave_speed");
var_wave_speed = 1.0; //higher = faster

uni_alpha = shader_get_uniform(shdWave, "alpha");


cFix = physics_fixture_create();
physics_fixture_set_collision_group(cFix, 0);    
physics_fixture_set_density(cFix, .5);  
physics_fixture_set_restitution(cFix, 0);  
physics_fixture_set_linear_damping(cFix, 0);  
physics_fixture_set_angular_damping(cFix, 0);  
physics_fixture_set_awake(cFix, 1);
physics_fixture_set_sensor(cFix, 1);
physics_fixture_set_circle_shape(cFix, 1);

cFixBind = physics_fixture_bind(cFix, id);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
physics_remove_fixture(id, cFixBind);
physics_fixture_delete(cFix);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// update
if (!(flags &amp; OBJ_PAR.UPDATABLE))
    exit;

if (canShoot &amp;&amp; !--canShoot)
    canShoot = -1;
    
switch (state)
{
case WEAPON_STATES.__FREE:
    phy_rotation = angleRotate(phy_rotation, -wAngleNeed, wAngleSpeed);
    if (phy_rotation == -wAngleNeed)
    {
       wAngleNeed = irandom(360);
    }
    if (canShoot == -1 
        &amp;&amp; needShoot)
    {
        weaponSetState(WEAPON_STATES.__SHIELD_ACTIVE);
    }
    cR = approach(cR, 0, 8);
    if (!cR)
        cA = 0;
    break;
    
case WEAPON_STATES.__SHIELD_ACTIVE:
    if (shotTmr &amp;&amp; !--shotTmr)
    {
        weaponSetState(WEAPON_STATES.__FREE);
        exit;
    }
    cA = approach(cA, .5, .03);
    cR = approach(cR, R, 4);
    // update mask
    physics_remove_fixture(id, cFixBind);
    physics_fixture_set_circle_shape(cFix, cR);
    cFixBind = physics_fixture_bind(cFix, id);
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oBaseBullet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (state == WEAPON_STATES.__SHIELD_ACTIVE)
{
    if (other.team != car.team)
        // delete
        with (other)
            instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// off physical pause
phy_active = 1;
flagSet(OBJ_PAR.UPDATABLE, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="15">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// on physical pause
phy_active = 0;
flagSet(OBJ_PAR.UPDATABLE, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// off pause
image_speed = imgspdstop;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// on pause
imgspdstop = image_speed;
image_speed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
if (global.debug)
    physics_draw_debug();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>-1</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,24</point>
    <point>17,37</point>
  </PhysicsShapePoints>
</object>
