<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oStateObject</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// base
event_inherited();

flagSet(OBJ_PAR.UPDATABLE 
    | OBJ_PAR.DRAWABLE
    | OBJ_PAR.IMPACTABLE_PAUSE 
    | OBJ_PAR.IMPACTABLE_TURN, 1);  

state = 0; 
// 0 - choose car \ change cars
// 1 - change car's things

cperc = 0;
swipex = 0;

CAR_ANGLE = 90;

shopGarageBottomCreate();

garage = oControl.json[? "garage"];
gWeapons = garage[? "weapons"];
gCars = garage[? "cars"];
activeCars = oControl.json[? "cars"];

dragInd = -1;
carInd = -1;

bc1 = make_colour_hsv(166, 116, 64);
bc2 = make_colour_hsv(175, 151, 88);
bc3 = make_colour_hsv(155, 139, 77);
bc4 = bc2;

garageChangeFolder(0);
garageStateInit(0);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!(flags &amp; OBJ_PAR.UPDATABLE))
    exit;
    
switch (state)
{
case 0:
    cperc = min(1, cperc + .05);
    break;
case 1: // particular car
    cperc = min(1, cperc + .05);
    break;
}

if (oControl.key[KEY.MOUSE_LEFT] == 0)
{
    // check folders
    mxpr = mouse_x;
    for (var i = 0; i &lt; foldersCount; i++)
    {
        var xx = folderx[i], 
            yy = foldery[i];
        if (point_in_rectangle(mouse_x, mouse_y, xx, yy, xx + fw, yy + fh))
        {
            for (var k = 0; k &lt; foldersCount; k++)
                foldera[k] = 0;
            foldera[i] = 1;
            dragInd = -1;
            garageChangeFolder(i);
        }
    }
    // check items
    if (mxpr == mouse_x)
    {
        if (point_in_rectangle(mouse_x, mouse_y, surfx, surfy, surfx + bottomw, surfy + bottomh))
        {
            switch (folderAInd)
            {
            case 0: //cars
                var rectx = 0;
                for (var i = 0, cnt = ds_list_size(gCars); i &lt; cnt; i++)
                {
                    var xbeg = surfx + swipex + rectx,
                        ybeg = surfy;
                    if (point_in_rectangle(mouse_x, mouse_y,
                        xbeg, ybeg, xbeg + boticow, ybeg + boticoh))
                    {
                        dragInd = i;
                        break;
                    }
                    rectx += boticow + boticobetw;
                }
                break;
            case 1: // weaps
                var rectx = 0;
                for (var i = 0, cnt = ds_list_size(gWeapons); i &lt; cnt; i++)
                {
                    var xbeg = surfx + swipex + rectx,
                        ybeg = surfy;
                    if (point_in_rectangle(mouse_x, mouse_y,
                        xbeg, ybeg, xbeg + boticow, ybeg + boticoh))
                    {
                        dragInd = i;
                        break;
                    }
                    rectx += boticow + boticobetw;
                }
                break;
            }
        }
        
    }
}
else if (oControl.key[KEY.MOUSE_LEFT] == 1)
{
    // swipe
    if (mouse_y &gt; bottomy1)
    {
        var d = mouse_x - mxpr;
        show_debug_message(string(swipex));
        if (d &lt; 0)
        {
            // swipe right  
            var val = surfx + bottomw;      
            if (rightX &gt; val)
                swipex -= swipePower * max(1, abs(d div 10));
            swipex = clamp(swipex, -val, 0);
        }
        else if (d &gt; 0)
        {
            // swipe left
            var val = surfx + bottomw;
                swipex += swipePower * max(1, abs(d div 10));
            swipex = clamp(swipex, -val, 0);
        }
        mxpr = mouse_x;
        //mxpr += min(swipePower * max(1, abs(d div 10)), abs(d)) * sign(d);
        garageChangeFolder(folderAInd);
    }
}
else if (oControl.key[KEY.MOUSE_LEFT] == 2)
{
    mxpr = mouse_x;
    
}

if (oControl.key[KEY.MOUSE_RIGHT] == 0)
{
    dragInd = -1;
    garageChangeFolder(folderAInd);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// off pause
image_speed = imgspdstop;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// on pause
imgspdstop = image_speed;
image_speed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// bottom
draw_rectangle_colour(0, 0, room_width, room_height, bc1, bc2, bc3, bc4, 0);
//draw bottom screen
drawCroppedRect(bottomx1, bottomy1, bottomx2, bottomy2, foldercinactive, 1, 1);

// surf
if (!surface_exists(surf))
{
    surf = surface_create(bottomw, bottomh);
    garageChangeFolder(folderAInd, dragInd);
}
draw_surface(surf, surfx, surfy);

//draw folders
for (var i = 0; i &lt; foldersCount; i++)
{
    if (foldera[i])
        continue;
    var xx = folderx[i], 
        yy = foldery[i],
        cc = foldercinactive,
        ct = foldercacitve;
    drawCroppedRect(xx, yy, xx + fw, yy + fh, cc, 1, 8);
    // text
    draw_set_font(fQuestion);
    draw_set_valign(fa_top);
    draw_set_halign(fa_left);
    draw_text_colour(xx + 20, yy + 5, foldert[i], ct, ct, ct, ct, 1);
}
    var xx = folderx[folderAInd], 
        yy = foldery[folderAInd],
        cc = foldercacitve,
        ct = foldercinactive;
// real one
drawCroppedRect(xx, yy, xx + fw, yy + fh, cc, 1, 8);
// text
draw_set_font(fQuestion);
draw_set_valign(fa_top);
draw_set_halign(fa_left);
draw_text_colour(xx + 15, yy + 5, foldert[folderAInd], ct, ct, ct, ct, 1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
