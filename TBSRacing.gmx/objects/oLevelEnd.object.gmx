<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100000</depth>
  <persistent>0</persistent>
  <parentName>oStateObject</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// base
event_inherited();

flagSet(OBJ_PAR.UPDATABLE 
    | OBJ_PAR.DRAWABLE
    | OBJ_PAR.IMPACTABLE_PAUSE 
    | OBJ_PAR.IMPACTABLE_TURN, 1);  

ww = 350;
hh = 450;
x1 = global.guiW / 2 - ww div 2;
y1 = global.guiH / 2 - hh div 2;
rectperc = 0;
rectc = c_black;

text = "";
textx = x1 + ww / 2;
texty = y1 + 20;
textc1 = 0;
textc2 = 0;

psys = part_system_create();
part_system_automatic_update(psys, 0);
part_system_automatic_draw(psys, 0);
part_system_depth(psys, depth - 1);
part_system_position(psys, view_xview, view_yview);

pem = part_emitter_create(psys);
part_emitter_region(psys, pem, x1 - 50, x1 + ww + 50, y1 - 50, y1 + hh / 2 + 50, ps_shape_rectangle, ps_distr_linear);

ptype = part_type_create();
part_type_sprite(ptype, sExplosion1, 1, 1, 0);
part_type_life(ptype, room_speed / 3, room_speed / 3);
part_type_size(ptype, 1, 2, 0, 0);

// ok bt
btok = instance_create(x1 + ww / 2, y1 + hh - 44 - 15, oButtonOk);

scorex = x1 + ww / 2;
scorey = texty + 55;
scorestr = systemGetPhrase(0, 4) + "#" + string(oGameController.SCORE);
scorec1 = make_colour_hsv(220, 127, 187);
scorec2 = make_colour_hsv(220, 127, 140);

// prestige
prx = scorex;
pry = scorey + 95;
var prestige = irandom_range(3, 10) * max(0, (100 - ((global.ctimeBegin - global.ctime) div room_speed)));
prstr = systemGetPhrase(0, 5) + "#" + string(prestige);

// SUM
scorefin = prestige + oGameController.SCORE
scoremx = prx;
scoremy = pry + 95;
scorems = systemGetPhrase(0, 6) + "#" + string(scorefin);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
part_emitter_destroy(psys, pem);
part_type_destroy(ptype);
part_system_destroy(psys);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!(flags &amp; OBJ_PAR.UPDATABLE))
    exit;
    
rectperc = min(rectperc + .05, 1);

part_system_update(psys);
if (global.ctime % 30 == 0)
{
    part_emitter_burst(psys, pem, ptype, irandom_range(1, 3));
}   
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// off pause
image_speed = imgspdstop;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// on pause
imgspdstop = image_speed;
image_speed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>drawCroppedRect(x1, y1, x1 + ww * rectperc, y1 + hh * rectperc, rectc, 1, 9);
draw_set_font(fTurnEnd);
draw_set_halign(fa_center);
draw_set_valign(fa_top);
var tt = string_copy(text, 1, round(string_length(text) * rectperc));
draw_text_colour(textx - 4 * sin(global.ctime / 20), texty, tt, textc2, textc2, textc2, textc2, 1);
draw_text_colour(textx, texty, tt, textc1, textc1, textc1, textc1, 1);


draw_set_font(fTurnEnd);
draw_set_halign(fa_center);
draw_set_valign(fa_top);
var sct = string_copy(scorestr, 1, round(string_length(scorestr) * rectperc));
draw_text_colour(scorex - 4 * sin(global.ctime / 20), scorey, sct, scorec2, scorec2, scorec2, scorec2, 1);
draw_text_colour(scorex, scorey, sct, scorec1, scorec1, scorec1, scorec1, 1);

sct = string_copy(prstr, 1, round(string_length(prstr) * rectperc));
draw_text_colour(prx - 4 * sin(global.ctime / 20), pry, sct, scorec2, scorec2, scorec2, scorec2, 1);
draw_text_colour(prx, pry, sct, scorec1, scorec1, scorec1, scorec1, 1);

sct = string_copy(scorems, 1, round(string_length(scorems) * rectperc));
draw_text_colour(scoremx - 4 * sin(global.ctime / 20), scoremy, sct, scorec2, scorec2, scorec2, scorec2, 1);
draw_text_colour(scoremx, scoremy, sct, scorec1, scorec1, scorec1, scorec1, 1);

part_system_drawit(psys);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
