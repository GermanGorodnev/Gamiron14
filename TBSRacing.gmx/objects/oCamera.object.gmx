<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sMask32x32</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-3000</depth>
  <persistent>0</persistent>
  <parentName>oStateObject</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Follows
event_inherited();
focusObj = oCamera;
view_object = oCamera;
scale = 1;
view_wview = round(global.guiW / scale);
view_hview = round(global.guiH / scale);
view_wport = global.guiW;
view_hport = global.guiH;
view_hborder = view_wview / 2;
view_vborder = view_hview / 2;
view_visible = 1;
friction = .4;

state = CAM_STATES.__FREE;

movSpd = 5;

x = global.guiW div 2;
y = global.guiH div 2;
targX = x;
targY = y;

mdeadx1 = global.guiW div 15 div scale;
mdeady1 = global.guiH div 15 div scale;
mdeadx2 = (global.guiW - mdeadx1) div scale;
mdeady2 = (global.guiH - mdeady1 div 2) div scale;

camFlags = 0;
camFlags = flagSetVar(camFlags, CAM_FLAGS.DARKEN | CAM_FLAGS.SHAKING, 0);

darkenA = 0;
darkenTimer = -1;
darkenNeed = 0;
bl = c_black;

//x = room_width / 2;
//y = room_height / 2;

camMaxDist = 60;

// shaker
shakeTimer = -1;
shX = 0;
shY = 0;

//visible = global.debug;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!(flags &amp; OBJ_PAR.UPDATABLE))
{
    speed = 0;
    exit;
}
    
if (camFlags &amp; CAM_FLAGS.SHAKING)
{
    if (shakeTimer &amp;&amp; !--shakeTimer)
    {
        shakeTimer = -1;
        camFlags = flagSetVar(camFlags, CAM_FLAGS.SHAKING, 0);
        shX = 0;
        shY = 0;
    }   
}

if (camFlags &amp; CAM_FLAGS.DARKEN)
{
    if (darkenA &lt; darkenNeed)
        darkenA = min(darkenA + 0.03, darkenNeed);
    if (darkenA &gt; darkenNeed)
        darkenA = max(darkenA - 0.03, darkenNeed);
}

switch (state)
{
case CAM_STATES.__FREE:
    /*var mscreenx = mouse_x - view_xview,
        mscreeny = mouse_y - view_yview;
    friction = 0;
    if ((abs(mouse_x - x) &gt;= (global.guiW / 2 - 40)) || (abs(mouse_y - y) &gt;= (global.guiH / 2 - 40)))
    {
        move_towards_point(mouse_x, mouse_y, movSpd); //(distance_to_point(mouse_x, mouse_y) / 4) * (global.guiW / global.guiH));
    }
    /*if (!point_in_rectangle(mscreenx, mscreeny, 
        mdeadx1, mdeady1, mdeadx2, mdeady2))
    {
        targX = mouse_x;
        targY = mouse_y;
        if (distance_to_point(targX, targY) &lt; movSpd)
        {
            speed = 0;
            x = targX;
            y = targY;
        }
        else
        {
            var dd = point_direction(x, y, targX, targY);
            x += lengthdir_x(movSpd, dd);   
            y += lengthdir_y(movSpd, dd);  
        }
    }
    else*/
    {
        var ymove = oGameController.key[KEY.CAM_BOTTOM] - oGameController.key[KEY.CAM_TOP],
            xmove = oGameController.key[KEY.CAM_RIGHT] - oGameController.key[KEY.CAM_LEFT],
            spdmove = movSpd;
        x += spdmove * xmove;
        y += spdmove * ymove;
    }
    break;
    
default: //case CAM_STATES.__PLAYER:
    var dd = point_direction(oPlayer.x, oPlayer.y, mouse_x, mouse_y);
    targX = oPlayer.x + lengthdir_x(camMaxDist, dd);
    targY = oPlayer.y + lengthdir_y(camMaxDist, dd);
    if (distance_to_point(targX, targY) &lt; movSpd)
    {
        speed = 0;
        x = targX;
        y = targY;
    }
    else
        move_towards_point(targX, targY, movSpd);
    break;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///pause off
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///pause on
speed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (camFlags &amp; CAM_FLAGS.DARKEN)
{
    draw_set_alpha(darkenA);
    draw_rectangle_colour(view_xview, view_yview, view_xview + view_wview, view_yview + view_hview, bl, bl, bl, bl, 0);
    draw_set_alpha(1);
}
// DEBUG
camDebug();

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
