<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-500</depth>
  <persistent>0</persistent>
  <parentName>oStateObject</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// in the game
event_inherited();
image_speed = 0;

flagSet(OBJ_PAR.IMPACTABLE_TURN | OBJ_PAR.IMPACTABLE_PAUSE, 0);

instance_create(oPlayerCar.x, oPlayerCar.y, oCamera);
instance_create(0, 0, oHumanGenerator);

controlBit = CONTROL.__KEYMOUSE;
key[KEY.CNT] = 0;
lReleased = 1;

ingameState = INGAME_STATES.TURN;
substate = SUBSTATES.__NONE;
guistate = GUI_STATES.__PATH_EDIT;

// params
turnTimer = -1;
turnTurns = 5 * room_speed;
turnEndApproval = 0;

yesno = 0;

// cars
selectedCar = noone;
selectedCarInd = -1;

guix1 = 0;
guiy1 = global.guiH - (global.guiH div 4);
guix2 = global.guiW;
guiy2 = global.guiH;
guicol = make_colour_hsv(0, 0, 120);

// thermometer
spidx = global.guiW - 230;
spidy = global.guiH - 30;
// speedplate
spplatex = spidx - sprite_get_width(sSpeedometer) / 2 - 10 - sprite_get_width(sSpeedPlate);
spplatey = spidy - sprite_get_height(sSpeedPlate);

// cars teams
playerTeam[0] = noone;
playerCarsCnt = 0;
enemyTeam[0] = noone;
enemyCarsCnt = 0;

// car path
pathPointRad = 5;
pathPointTrack = -1;
pathId = -1;

// control arrow
arrowBuild = 0;
arrowColInner = make_colour_hsv(38, 195, 170);
arrowColOuter = make_colour_hsv(38, 106, 86);

// weapon
weaponTargeting = noone;

kmhx = spidx;
kmhy = spplatey;
kmhtx = kmhx + 8;
kmhty = kmhy + 1;
black = c_black;

selectedSignYoff = 35;
selectedSignMaxH = 25;
selectedSignXscale = 1;
selectedSignXpath = 0; // 0 - to -1, 1 - to 1
selectedSignMaxXscale = 1.7;

// time
turnTimerX = global.guiW div 2;
turnTimerY = global.guiH div 8;

// car hp
carhpind = 0;
carhpx = guix1 + 130;
carhpy = guiy1 + (guiy2 - guiy1) div 2;

wheelsCount = 4;
wheelsind = 0;
wheelX[wheelsCount - 1] = 0;
wheelY[wheelsCount - 1] = 0; 
var wx = sprite_get_xoffset(sCarHP),   
    wy = sprite_get_yoffset(sCarHP);
wheelX[0] = carhpx + 3 - wx;
wheelY[0] = carhpy + 33 - wy;
wheelX[1] = carhpx + 81 - wx;
wheelY[1] = wheelY[0];

wheelX[2] = wheelX[0];
wheelY[2] = carhpy + 125 - wy;
wheelX[3] = wheelX[1];
wheelY[3] = wheelY[2];

// engine
carhpenx1 = carhpx + 18 - wx;
carhpeny1 = carhpy + 13 - wy;
carhpenx2 = carhpenx1 + 47;
carhpeny2 = carhpeny1 + 44;
carhpenx = carhpenx1 + (carhpenx2 - carhpenx1) / 2;
carhpeny = carhpeny1 + (carhpeny2 - carhpeny1) / 2;

weather = WEAHTER.__RAINY;
// rain
psysrain = part_system_create();
part_system_depth(psysrain, depth);
part_system_automatic_update(psysrain, 0);
// emitter
rainemm = part_emitter_create(psysrain);

// rain
raintype = part_type_create();
part_type_sprite(raintype, sWeatherRain, 0, 0, 0);
part_type_life(raintype, room_speed * 1.5, room_speed * 2);
part_type_speed(raintype, 2, 4, 0, 0);


// rocket smoke effect
rocketsmoke = part_type_create();
part_type_sprite(rocketsmoke, sCarSmoke, 0, 0, 0);
part_type_life(rocketsmoke, room_speed / 4, room_speed / 2);
part_type_orientation(rocketsmoke, 0, 359, 0, 2, 0);
part_type_alpha2(rocketsmoke, .1, 0);
part_type_speed(rocketsmoke, .2, .3, 0, 0);

// light system
lightsurf = surface_create(global.guiW, global.guiH);
gameLightAlpha = .5;
instance_create(0, 0, oLightDepth);

weatherInit(weather);
playerGUISetSelectedCar(noone);


alarm[0] = room_speed / 2;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// clear
part_type_destroy(raintype);
part_emitter_destroy(psysrain, rainemm);
part_system_destroy(psysrain);

/// light
surface_free(lightsurf);

part_type_destroy(rocketsmoke);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// WARNING
gameControllerStateSet(INGAME_STATES.TURN);
gameControllerSubstateSet(SUBSTATES.__NONE);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// control the game
playerGetInput();
switch (global.gameState)
{
case GAME_STATES.__TURNENDYESNO:
case GAME_STATES.__PAUSE:
    exit;
    break;
}

switch (ingameState)
{
case INGAME_STATES.TURN:
    // determine actions
    gameLightUpdate();
    switch (substate)
    {
    case SUBSTATES.__NONE:
        gameControllerSubstateNoneUpdate();
        break;
        
    case SUBSTATES.__CAR_MOVE:
        gameControllerSubstateCarMoveUpdate();        
        break;
        
    //case SUBSTATES.__CAR_WEAPONS:
    //    gameControllerSubstateCarWeaponsUpdate();
    }
    break;
    
    
    
    
    
case INGAME_STATES.GAME:
    // performing
    weatherUpdate();
    gameLightUpdate();
    if (turnTimer &amp;&amp; !--turnTimer)
    {
        // end, pause
        gameControllerStateSet(INGAME_STATES.TURN);
    }
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw game gui
switch (ingameState)
{
case INGAME_STATES.TURN:
    switch (substate)
    {
    case SUBSTATES.__NONE:
        break;
        
    case SUBSTATES.__CAR_WEAPONS:
        if (instance_exists(selectedCar))
        {
            // draw car control interface
            drawCroppedRect(guix1 - 5, guiy1 - 5, guix2 + 5, guiy2 + 5, black, 1, 3);
            drawCroppedRect(guix1, guiy1, guix2, guiy2, guicol, 1, 3);
            // all weapons
            
        }
        break;
        
    case SUBSTATES.__CAR_MOVE:
        if (instance_exists(selectedCar))
        {
            // draw car control interface
            drawCroppedRect(guix1 - 5, guiy1 - 5, guix2 + 5, guiy2 + 5, black, 1, 3);
            drawCroppedRect(guix1, guiy1, guix2, guiy2, guicol, 1, 3);
            // thermometer
            draw_sprite_ext(sSpeedometer, 0, spidx, spidy, 1, 1, 0, image_blend, image_alpha);
            // arrow
            var spdAngle = clamp(0, 
                90 - (selectedCar.engineTemperature / selectedCar.engineMaxTemperature) * 90,
                90);
            draw_sprite_ext(sSpeedometerArrow, 0, spidx, spidy, 1, 1, spdAngle, image_blend, image_alpha);
            // speed
            draw_sprite_ext(sSpeedPlate, 0, spplatex, spplatey, 1, 1, 0, image_blend, image_alpha);        
            // real speedometer
            draw_sprite_ext(sKmh, 0, kmhx, kmhy, 1, 1, 0, image_blend, image_alpha);  
            draw_set_font(fSpeed);
            draw_set_halign(fa_left);
            draw_set_valign(fa_top);
            draw_text_colour(kmhtx, kmhty, string_format(selectedCar.phy_speed * 50, 1, 0), black, black, black, black, 1);
            
            // car hitpoints
            // base
            draw_sprite_ext(sCarHP, carhpind, carhpx, carhpy, 1, 1, 0, image_blend, image_alpha);
            // 4 wheels
            for (var i = 0; i &lt; wheelsCount; i ++)
            {
                var percent = selectedCar.wheelHP[i] / selectedCar.wheelMaxHP[i],
                    coldraw = -1;
                if (percent &gt;= .75)
                    coldraw = make_colour_hsv(90, 204, 70);
                else if (percent &gt;= .35)
                    coldraw = make_colour_hsv(14, 208, 70);
                else
                    coldraw = make_colour_hsv(254, 255, 72);
                draw_sprite_ext(sCarHPWheel, wheelsind, wheelX[i], wheelY[i], 1, 1, 0, coldraw, image_alpha);
            }
            // engine
            var pc = selectedCar.engineHP / selectedCar.engineMaxHP,
                coldraw = -1;
            if (percent &gt;= .75)
                coldraw = make_colour_hsv(90, 204, 70);
            else if (percent &gt;= .35)
                coldraw = make_colour_hsv(14, 208, 70);
            else
                coldraw = make_colour_hsv(254, 255, 72)
                
            drawCroppedRect(carhpenx1 - 2, carhpeny1 - 2, carhpenx2 + 2, carhpeny2 + 2, c_black, image_alpha, 8);
            drawCroppedRect(carhpenx1, carhpeny1, carhpenx2, carhpeny2, coldraw, image_alpha, 8);
            draw_sprite_ext(sCarHPEngine, 0, carhpenx, carhpeny, 1, 1, 0, image_blend, image_alpha);
        }
        break;
    }
    break;
    
case INGAME_STATES.GAME:
    draw_set_font(fSpeed);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    draw_text_colour(turnTimerX, turnTimerY, string(round(turnTimer / room_speed)), black, black, black, black, 1);
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw things
///Draw game gui
draw_text_colour(view_xview + 30, view_yview + 30, string(fps), c_red, c_blue, c_red, c_yellow, 1);

switch (substate)
{
case SUBSTATES.__NONE:
    break;
    
case SUBSTATES.__CAR_MOVE:
case SUBSTATES.__CAR_WEAPONS:
    if (instance_exists(selectedCar))
    {
        // "selected" arrow
        draw_sprite_ext(sSelectedSign, 0, selectedCar.phy_position_x, selectedCar.phy_position_y - selectedSignYoff - abs(sin(global.ctime / 75)) * selectedSignMaxH, clamp(selectedSignXscale, -1, 1), 1, 0, c_white, 1);
        with (selectedCar)
        {
            if (control == CONTROL_TYPES.ARROW)
            {
                if (oGameController.arrowBuild)
                    drawBigArrow(phy_position_x, phy_position_y, mouse_x, mouse_y,
                        oGameController.arrowColInner, oGameController.arrowColOuter, 1);
            }
        }
    }
    break;
}

// light surf
gameLightDraw();


/*var gst;
switch (global.gameState)
{
case GAME_STATES.__GAME: gst = "game"; break;
case GAME_STATES.__TURNENDYESNO: gst = "yesnoturn"; break;
}
draw_text(view_xview, view_yview, string(gst));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
