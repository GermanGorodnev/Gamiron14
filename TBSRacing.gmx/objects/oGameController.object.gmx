<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-500</depth>
  <persistent>0</persistent>
  <parentName>oStateObject</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// in the game
event_inherited();
image_speed = 0;

flagSet(OBJ_PAR.IMPACTABLE_TURN | OBJ_PAR.IMPACTABLE_PAUSE, 0);

instance_create(oPlayerCar.x, oPlayerCar.y, oCamera);

controlBit = CONTROL.__KEYMOUSE;
key[KEY.CNT] = 0;

ingameState = INGAME_STATES.TURN;
substate = SUBSTATES.__NONE;
guistate = GUI_STATES.__PATH_EDIT;

// params
turnTimer = -1;
turnTurns = 5 * room_speed;
turnEndApproval = 0;

yesno = 0;

// cars
selectedCar = noone;

guix1 = 0;
guiy1 = global.guiH - (global.guiH div 4);
guix2 = global.guiW;
guiy2 = global.guiH;
guicol = make_colour_hsv(0, 0, 120);

// thermometer
spidx = global.guiW - 230;
spidy = global.guiH - 30;
// speedplate
spplatex = spidx - sprite_get_width(sSpeedometer) / 2 - 10 - sprite_get_width(sSpeedPlate);
spplatey = spidy - sprite_get_height(sSpeedPlate);

// cars teams
playerTeam[0] = noone;
playerCarsCnt = 0;
enemyTeam[0] = noone;
enemyCarsCnt = 0;

// car path
pathPointRad = 5;
pathPointTrack = -1;
pathId = -1;

kmhx = spidx;
kmhy = spplatey;
kmhtx = kmhx + 8;
kmhty = kmhy + 1;
black = c_black;

selectedSignYoff = 35;
selectedSignMaxH = 25;
selectedSignXscale = 1;
selectedSignXpath = 0; // 0 - to -1, 1 - to 1
selectedSignMaxXscale = 1.7;

// time
turnTimerX = global.guiW div 2;
turnTimerY = global.guiH div 8;

alarm[0] = room_speed / 2;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// WARNING
gameControllerStateSet(INGAME_STATES.TURN);
gameControllerSubstateSet(SUBSTATES.__NONE);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// control the game
playerGetInput();
switch (global.gameState)
{
case GAME_STATES.__TURNENDYESNO:
case GAME_STATES.__PAUSE:
    exit;
    break;
}

switch (ingameState)
{
case INGAME_STATES.TURN:
    // determine actions
    switch (substate)
    {
    case SUBSTATES.__NONE:
        gameControllerSubstateNoneUpdate();
        break;
        
    case SUBSTATES.__CAR_MOVE:
        gameControllerSubstateCarMoveUpdate();        
        break;
    }
    break;
    
    
    
    
    
case INGAME_STATES.GAME:
    // performing
    if (turnTimer &amp;&amp; !--turnTimer)
    {
        // end, pause
        gameControllerStateSet(INGAME_STATES.TURN);
    }
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw game gui
switch (ingameState)
{
case INGAME_STATES.TURN:
    switch (substate)
    {
    case SUBSTATES.__NONE:
        break;
        
    case SUBSTATES.__CAR_MOVE:
        if (instance_exists(selectedCar))
        {
            // draw car control interface
            drawCroppedRect(guix1 - 5, guiy1 - 5, guix2 + 5, guiy2 + 5, black, 1, 3);
            drawCroppedRect(guix1, guiy1, guix2, guiy2, guicol, 1, 3);
            // thermometer
            draw_sprite_ext(sSpeedometer, 0, spidx, spidy, 1, 1, 0, image_blend, image_alpha);
            // arrow
            var spdAngle = clamp(0, 
                90 - (selectedCar.engineTemperature / selectedCar.engineMaxTemperature) * 90,
                90);
            draw_sprite_ext(sSpeedometerArrow, 0, spidx, spidy, 1, 1, spdAngle, image_blend, image_alpha);
            // speed
            draw_sprite_ext(sSpeedPlate, 0, spplatex, spplatey, 1, 1, 0, image_blend, image_alpha);        
            // real speedometer
            draw_sprite_ext(sKmh, 0, kmhx, kmhy, 1, 1, 0, image_blend, image_alpha);  
            draw_set_font(fSpeed);
            draw_set_halign(fa_left);
            draw_set_valign(fa_top);
            draw_text_colour(kmhtx, kmhty, string_format(selectedCar.spd, 1, 0), black, black, black, black, 1);
        }
        break;
    }
    break;
    
case INGAME_STATES.GAME:
    draw_set_font(fSpeed);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    draw_text_colour(turnTimerX, turnTimerY, string(round(turnTimer / room_speed)), black, black, black, black, 1);
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw things
///Draw game gui
switch (substate)
{
case SUBSTATES.__NONE:
    break;
    
case SUBSTATES.__CAR_MOVE:
    if (instance_exists(selectedCar))
    {
        // "selected" arrow
        draw_sprite_ext(sSelectedSign, 0, selectedCar.phy_position_x, selectedCar.phy_position_y - selectedSignYoff - abs(sin(global.ctime / 75)) * selectedSignMaxH, clamp(selectedSignXscale, -1, 1), 1, 0, c_white, 1);
        with (selectedCar)
        {
            event_perform(ev_other, ev_user4);
        }
    }
    break;
}

/*var gst;
switch (global.gameState)
{
case GAME_STATES.__GAME: gst = "game"; break;
case GAME_STATES.__TURNENDYESNO: gst = "yesnoturn"; break;
}
draw_text(view_xview, view_yview, string(gst));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
